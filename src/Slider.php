<?php

namespace dynamikaweb\tiny;

use yii\helpers\Html;
use yii\helpers\Json;

class Slider extends \yii\base\Widget
{
    const ASSET_TYPE_CDN = 1;
    const ASSET_TYPE_LOCAL = 2;
    
    /**
     * @var string prefix for the autogenerated id
     */
    public static $autoIdPrefix = 'dtns';

    /**
     * @var string|null the JS object slider exposed
     */
    public $export = null;

    /**
     * @var string the widget container element
     */
    public $container = 'div';

    /**
     * @var array the HTML attributes for the widget container
     */
    public $containerOptions = [];

    /**
     * @var array options for the Owl Carousel plugin
     * @link https://github.com/ganlanyuan/tiny-slider#options Available Options
     */
    public $pluginOptions = [];

    /**
     * @var array alias to @var $pluginOptions
     */
    public $clientOptions = [];

    /**
     * @var string|object|null custom javascript function or script
     */
    public $clientScript = null;


    public $assetType = self::ASSET_TYPE_LOCAL;

    /**
     *  {@inheritdoc}
     */
    public function init()
    {
        parent::init();  
        $this->containerOptions = array_merge(['id' => $this->getId()], $this->containerOptions);
        $this->export = $this->export? $this->export: "slider_{$this->containerOptions['id']}";
        $this->pluginOptions = array_merge($this->pluginOptions, $this->clientOptions, [
            'container' => "#{$this->containerOptions['id']}"
        ]);
        ob_start();
    }

    /**
     * Registers the needed assets.
     *
     * @param View $view The View object
     */
    public function registerAssets($view)
    {
        if($this->assetType == self::ASSET_TYPE_LOCAL) {
            SliderAsset::register($view);
        } else {
            SliderAssetCDN::register($view);
        }

        /** register slider script plugin **/
        $view->registerJs(strtr('const {export} = tns({pluginOptions});', [
            '{pluginOptions}' => Json::encode($this->pluginOptions),
            '{export}' => $this->export
        ]),
            $view::POS_END
        );

        /** register custom function script after plugin **/
        if ($this->clientScript) {
            $view->registerJs(strtr("const script_{export} = ({clientScript});if (typeof script_{export} == 'function') script_{export}({export});", [    
                '{clientScript}' => $this->clientScript,
                '{export}' => $this->export
            ]),
                $view::POS_END
            );
        }
    }

    public function run()
    {
        $this->registerAssets($this->getView());
        return Html::tag($this->container, ob_get_clean(), $this->containerOptions);
    }
}
